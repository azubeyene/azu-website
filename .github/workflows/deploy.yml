name: Deploy to GitHub Pages

on:
  # Trigger the workflow every time you push to the `main` branch
  # Using a different branch name? Replace `main` with your branchâ€™s name
  push:
    branches: [ main ]
  # Allows you to run this workflow manually from the Actions tab on GitHub.
  workflow_dispatch:

# Prevent overlapping publishes (optional but nice)
concurrency:
  group: pages
  cancel-in-progress: true

# Allow this job to clone the repo and create a page deployment
permissions:
  contents: read
  pages: write
  id-token: write

# Set your CDN bases here 
env:
  CDN_BASE_BLOG: "https://cdn.example.com/blog/"
  CDN_BASE_PROJ: "https://cdn.example.com/projects/"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout 
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - name: Install deps
        run: npm ci
      - name: DEBUG before rewrite
        run: |
          echo "Scanning for _assets refs BEFORE rewrite..."
          grep -RInE '\((\.\/)?_assets/|src=["'\''](\.\/)?_assets/|^\s*(image|heroImage|cover|banner|thumbnail)\s*:\s*["'\'']?(\.\/)?_assets/' src/pages || true
      - name: Rewrite blog image refs to CDN
        env:
          CDN: ${{ env.CDN_BASE_BLOG }}
        run: |
          find src/pages/blog -type f -name "*.md" -print0 | xargs -0 -I{} \
          perl -0777 -i -pe "my \$cdn=\$ENV{CDN};
            # Markdown image: ![alt](_assets/foo.png) or ![alt](./_assets/foo.png)
            s{!\\[([^\\]]*)\\]\\((?:\\./)?_assets/([^\\)]+)\\)}{'!['.\$1.']('.\$cdn.\$2.')'}ge;

            # Raw HTML <img src="_assets/foo.png"> or <img src="./_assets/foo.png">
            s{(<img\\s+[^>]*?src=[\"\\'])(?:\\./)?_assets/([^\"\\'>]+)([\"\\'>])}{\$1.\$cdn.\$2.\$3}ge;

            # Frontmatter keys like: image: _assets/foo.png
            s{^([\\s-]*?(?:image|heroImage|cover|banner|thumbnail)\\s*:\\s*[\"\\']?)(?:\\./)?_assets/([^\"\\'\\r\\n]+)}{\$1.\$cdn.\$2}gmi;
          " {}
      - name: Rewrite project image refs to CDN
        env:
          CDN: ${{ env.CDN_BASE_PROJ }}
        run: |
          find src/pages/projects -type f -name "*.md" -print0 | xargs -0 -I{} \
          perl -0777 -i -pe "my \$cdn=\$ENV{CDN};
            s{!\\[([^\\]]*)\\]\\((?:\\./)?_assets/([^\\)]+)\\)}{'!['.\$1.']('.\$cdn.\$2.')'}ge;
            s{(<img\\s+[^>]*?src=[\"\\'])(?:\\./)?_assets/([^\"\\'>]+)([\"\\'>])}{\$1.\$cdn.\$2.\$3}ge;
            s{^([\\s-]*?(?:image|heroImage|cover|banner|thumbnail)\\s*:\\s*[\"\\']?)(?:\\./)?_assets/([^\"\\'\\r\\n]+)}{\$1.\$cdn.\$2}gmi;
          " {}
      - name: Verify no local _assets links remain
        run: |
          echo "Scanning for _assets refs AFTER rewrite..."
          if grep -RInE '\((\.\/)?_assets/|src=["'\''](\.\/)?_assets/|^\s*(image|heroImage|cover|banner|thumbnail)\s*:\s*["'\'']?(\.\/)?_assets/' src/pages; then
            echo "Found leftover _assets references after rewrite"; exit 1;
          fi
      - name: Build (Astro)
        run: npm run build
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4