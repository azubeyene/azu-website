name: Deploy to GitHub Pages

on:
  # Trigger the workflow every time you push to the `main` branch
  # Using a different branch name? Replace `main` with your branchâ€™s name
  push:
    branches: [ main ]
  # Allows you to run this workflow manually from the Actions tab on GitHub.
  workflow_dispatch:

# Prevent overlapping publishes (optional but nice)
concurrency:
  group: pages
  cancel-in-progress: true

# Allow this job to clone the repo and create a page deployment
permissions:
  contents: read
  pages: write
  id-token: write

# Set your CDN bases here 
env:
  CDN_BASE_BLOG: "https://cdn.example.com/blog/"
  CDN_BASE_PROJ: "https://cdn.example.com/projects/"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout 
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - name: Install deps
        run: npm ci
      - name: DEBUG before rewrite
        run: |
          echo "Scanning for _assets refs BEFORE rewrite..."
          grep -RInE '\((\.\/)?_assets/|src=["'\''](\.\/)?_assets/|^\s*(image|heroImage|cover|banner|thumbnail)\s*:\s*["'\'']?(\.\/)?_assets/' src/pages || true
      - name: Rewrite _assets refs to CDN
        env:
          BLOG: ${{ env.CDN_BASE_BLOG }}
          PROJ: ${{ env.CDN_BASE_PROJ }}
        run: |
          node - <<'NODE'
          const fs = require('fs');
          const path = require('path');

          const BLOG = process.env.BLOG || '';
          const PROJ = process.env.PROJ || '';

          if (!BLOG || !PROJ) {
            console.error('CDN bases are empty. Set CDN_BASE_BLOG and CDN_BASE_PROJ envs.');
            process.exit(1);
          }

          function rewriteDir(dir, base) {
            const walk = (p) => {
              for (const ent of fs.readdirSync(p, { withFileTypes: true })) {
                const fp = path.join(p, ent.name);
                if (ent.isDirectory()) walk(fp);
                else if (ent.isFile() && fp.endsWith('.md')) {
                  console.log("fp");
                  let s = fs.readFileSync(fp, 'utf8');

                  // 1) Markdown images: ![alt](_assets/foo.png) or ![alt](./_assets/foo.png)
                  s = s.replace(/!\[([^\]]*)\]\((?:\.\/)?_assets\/([^)]+)\)/g,
                                (_, alt, file) => `![${alt}](${base}${file})`);

                  // 2) Raw HTML: <img src="_assets/foo.png"> or <img src="./_assets/foo.png">
                  s = s.replace(/(<img\s+[^>]*?src=["'])(?:\.\/)?_assets\/([^"'>]+)(["'>])/g,
                                (_, pre, file, post) => `${pre}${base}${file}${post}`);

                  // 3) Frontmatter keys on their own lines:
                  // image: _assets/foo.png
                  // heroImage: "./_assets/foo.png"
                  s = s.replace(
                    /^(\s*[-\s]*?(?:image|heroImage|cover|banner|thumbnail)\s*:\s*["']?)(?:\.\/)?_assets\/([^\r\n"']+)/gmi,
                    (_, pre, file) => `${pre}${base}${file}`
                  );

                  console.log(s);
                  console.log(`![](${base}${file})`); 

                  fs.writeFileSync(fp, s);
                }
              }
            };
            if (fs.existsSync(dir)) walk(dir);
          }

          rewriteDir('src/pages/blog', BLOG);
          rewriteDir('src/pages/projects', PROJ);
          NODE
      - name: Verify no local _assets links remain
        run: |
          echo "Scanning for _assets refs AFTER rewrite..."
          if grep -RInE '\((\.\/)?_assets/|src=["'\''](\.\/)?_assets/|^\s*(image|heroImage|cover|banner|thumbnail)\s*:\s*["'\'']?(\.\/)?_assets/' src/pages; then
            echo "Found leftover _assets references after rewrite"; exit 1;
          fi
      - name: Build (Astro)
        run: npm run build
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4